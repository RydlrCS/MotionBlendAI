#!/usr/bin/env python3\n\"\"\"\nLocal test script for MotionBlend AI Fivetran Connector\n\nThis script validates the connector logic without requiring the Fivetran SDK,\nwhich is only available in the Fivetran environment.\n\"\"\"\n\nimport json\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add parent directory to path for imports\nsys.path.append(os.path.join(os.path.dirname(__file__), '..'))\n\n# Mock Fivetran SDK classes for local testing\nclass MockLogging:\n    @staticmethod\n    def info(msg):\n        print(f\"[INFO] {msg}\")\n    \n    @staticmethod\n    def warning(msg):\n        print(f\"[WARN] {msg}\")\n    \n    @staticmethod\n    def error(msg):\n        print(f\"[ERROR] {msg}\")\n\nclass MockOperations:\n    @staticmethod\n    def upsert(table, data):\n        print(f\"[UPSERT] {table}: {data.get('name', data.get('job_id', 'unknown'))}\")\n    \n    @staticmethod\n    def checkpoint(state):\n        print(f\"[CHECKPOINT] {len(state)} state keys\")\n\nclass MockConnector:\n    def __init__(self, update, schema):\n        self.update = update\n        self.schema = schema\n    \n    def debug(self, configuration):\n        print(\"=== Fivetran Connector Debug Mode ===\")\n        print(f\"Configuration: {json.dumps(configuration, indent=2)}\")\n        \n        # Test schema function\n        print(\"\\n=== Testing Schema Function ===\")\n        try:\n            schema_result = self.schema(configuration)\n            print(f\"Schema defines {len(schema_result)} tables:\")\n            for table in schema_result:\n                print(f\"  - {table['table']}: {len(table.get('columns', {}))} columns\")\n        except Exception as e:\n            print(f\"Schema error: {e}\")\n            return\n        \n        # Test update function\n        print(\"\\n=== Testing Update Function ===\")\n        try:\n            state = {}\n            self.update(configuration, state)\n            print(\"Update completed successfully\")\n        except Exception as e:\n            print(f\"Update error: {e}\")\n            import traceback\n            traceback.print_exc()\n\n# Replace imports with mocks\nsys.modules['fivetran_connector_sdk'] = type('MockModule', (), {\n    'Connector': MockConnector,\n    'Logging': MockLogging,\n    'Operations': MockOperations\n})()\n\n# Import our connector after mocking\nfrom connector import connector, validate_configuration, schema, update\n\n\ndef test_connector():\n    \"\"\"Test the connector with sample configuration.\"\"\"\n    # Test configuration\n    config = {\n        \"workspace_path\": \"/Users/ted/blenderkit_data/MotionBlendAI-1\",\n        \"sync_mode\": \"incremental\", \n        \"include_artifacts\": True,\n        \"max_file_size_mb\": 100,\n        \"sync_ui_analytics\": True\n    }\n    \n    print(\"Testing MotionBlend AI Fivetran Connector\")\n    print(\"==========================================\\n\")\n    \n    # Validate configuration\n    try:\n        validate_configuration(config)\n        print(\"‚úÖ Configuration validation passed\")\n    except Exception as e:\n        print(f\"‚ùå Configuration validation failed: {e}\")\n        return\n    \n    # Test schema generation\n    try:\n        tables = schema(config)\n        print(f\"‚úÖ Schema generated: {len(tables)} tables\")\n        \n        for table in tables:\n            name = table['table']\n            cols = len(table.get('columns', {}))\n            pk = table.get('primary_key', [])\n            print(f\"   üìä {name}: {cols} columns, PK: {pk}\")\n    \n    except Exception as e:\n        print(f\"‚ùå Schema generation failed: {e}\")\n        return\n    \n    # Test file discovery\n    workspace = Path(config['workspace_path'])\n    if workspace.exists():\n        print(f\"\\n‚úÖ Workspace found: {workspace}\")\n        \n        # Check for motion files\n        motion_files = []\n        search_paths = [\n            workspace / 'build' / 'build_motions',\n            workspace / 'build' / 'blend_snn',\n            workspace / 'project' / 'seed_motions',\n        ]\n        \n        for search_path in search_paths:\n            if search_path.exists():\n                for pattern in ['*.glb', '*.trc', '*.npy', '*.fbx']:\n                    files = list(search_path.glob(pattern))\n                    motion_files.extend(files)\n                    if files:\n                        print(f\"   üìÅ {search_path.name}: {len(files)} {pattern} files\")\n        \n        print(f\"   üé¨ Total motion files found: {len(motion_files)}\")\n        \n        if motion_files:\n            print(\"\\nüìã Sample files:\")\n            for f in motion_files[:5]:  # Show first 5\n                stat = f.stat()\n                size_mb = stat.st_size / (1024 * 1024)\n                print(f\"   - {f.name} ({size_mb:.1f} MB)\")\n    else:\n        print(f\"‚ùå Workspace not found: {workspace}\")\n        return\n    \n    print(\"\\nüöÄ Running connector debug mode...\")\n    connector.debug(configuration=config)\n\n\nif __name__ == \"__main__\":\n    test_connector()\n